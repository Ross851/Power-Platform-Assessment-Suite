'use client'

import React, { useState, useEffect, useRef } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Progress } from '@/components/ui/progress'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import Link from 'next/link'
import { 
  ArrowLeft, 
  Rocket, 
  Shield, 
  Target, 
  TrendingUp,
  ChevronRight,
  Info,
  CheckCircle,
  AlertCircle,
  XCircle,
  BarChart3,
  FileText,
  MapPin,
  Code,
  AlertTriangle,
  Sparkles,
  Activity,
  Award,
  Lightbulb,
  ClipboardList,
  RefreshCw,
  ExternalLink,
  Server,
  Zap,
  Settings,
  Upload,
  X
} from 'lucide-react'
import { enhancedGovernanceQuestions } from '@/lib/microsoft-2025-assessment-enhanced'
import { assessmentPillars, calculateSecurityScore, calculateMaturityLevel } from '@/lib/microsoft-2025-assessment-framework'
import { ThemeToggle } from '@/components/governance/theme-toggle'
import { SpiderChart } from '@/components/charts/spider-chart'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
// Temporarily disabled for debugging
// import type { 
//   TaskTracking, 
//   TimeEstimationFactors
// } from '@/lib/task-tracking'
// import {
//   initializeTaskTracking,
//   calculateAdaptiveEstimate,
//   getTaskType,
//   baselineEstimates
// } from '@/lib/task-tracking'
// import { TaskTrackingDialog, TaskStatusWithTracking } from '@/components/task-tracking'
import './demo.css'

// Chart component using CSS
const RadialChart = ({ value, label, color }: { value: number; label: string; color: string }) => {
  const circumference = 2 * Math.PI * 45
  const strokeDashoffset = circumference - (value / 100) * circumference

  return (
    <div className="relative w-32 h-32">
      <svg className="transform -rotate-90 w-32 h-32">
        <circle
          cx="64"
          cy="64"
          r="45"
          stroke="#e5e7eb"
          strokeWidth="12"
          fill="none"
        />
        <circle
          cx="64"
          cy="64"
          r="45"
          stroke={color}
          strokeWidth="12"
          fill="none"
          strokeDasharray={circumference}
          strokeDashoffset={strokeDashoffset}
          className="transition-all duration-1000 ease-out"
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-2xl font-bold">{value}%</span>
        <span className="text-xs text-muted-foreground">{label}</span>
      </div>
    </div>
  )
}

export default function Microsoft2025BeautifulPage() {
  const [responses, setResponses] = useState<Record<string, any>>({})
  const [activeTab, setActiveTab] = useState('overview')
  const [expandedQuestions, setExpandedQuestions] = useState<Set<string>>(new Set())
  const [animatedScores, setAnimatedScores] = useState<Record<string, number>>({})
  const [uploadedFiles, setUploadedFiles] = useState<Record<string, File[]>>({})
  const [expandedRecommendation, setExpandedRecommendation] = useState<number | null>(null)
  const [questionNotes, setQuestionNotes] = useState<Record<string, string>>({})
  const [taskAssignments, setTaskAssignments] = useState<Record<string, string>>({})
  const [riskOwners, setRiskOwners] = useState<Record<string, string>>({})
  const [sprintStatuses, setSprintStatuses] = useState<Record<string, string>>({})
  const [taskStatuses, setTaskStatuses] = useState<Record<string, string>>({})
  const [showReport, setShowReport] = useState(false)
  // const [taskTracking, setTaskTracking] = useState<Record<string, TaskTracking>>({})
  // const [organizationFactors, setOrganizationFactors] = useState<TimeEstimationFactors>({
  //   organizationSize: 'medium',
  //   teamExperience: 'intermediate',
  //   existingInfrastructure: 'basic',
  //   complianceRequirements: 'medium',
  //   changeManagementComplexity: 'moderate'
  // })

  // Microsoft expected scores
  const microsoftExpectedScores: Record<string, number> = {
    governance: 80,
    security: 85,
    reliability: 75,
    performance: 70,
    operations: 75,
    experience: 80
  }

  // Calculate scores
  const calculatePillarScore = (pillarId: string) => {
    const pillar = assessmentPillars.find(p => p.id === pillarId)
    if (!pillar) return 0
    
    let total = 0
    let count = 0
    
    pillar.questions.forEach(q => {
      if (responses[q.id]) {
        total += (responses[q.id] / 5) * 100
        count++
      }
    })
    
    return count > 0 ? Math.round(total / count) : 0
  }

  const pillarScores = assessmentPillars.reduce((acc, pillar) => {
    acc[pillar.id] = calculatePillarScore(pillar.id)
    return acc
  }, {} as Record<string, number>)

  const securityScore = calculateSecurityScore(responses)
  const maturityLevel = calculateMaturityLevel(responses)
  const overallScore = Math.round(Object.values(pillarScores).reduce((a, b) => a + b, 0) / Object.keys(pillarScores).length)

  // Animate scores
  useEffect(() => {
    const timers: NodeJS.Timeout[] = []
    Object.entries(pillarScores).forEach(([key, targetValue], index) => {
      const timer = setTimeout(() => {
        const interval = setInterval(() => {
          setAnimatedScores(prev => {
            const current = prev[key] || 0
            if (current < targetValue) {
              return { ...prev, [key]: Math.min(current + 2, targetValue) }
            }
            clearInterval(interval)
            return prev
          })
        }, 20)
      }, index * 100)
      timers.push(timer)
    })
    return () => timers.forEach(clearTimeout)
  }, [responses])

  const toggleQuestionExpanded = (questionId: string) => {
    const newExpanded = new Set(expandedQuestions)
    if (newExpanded.has(questionId)) {
      newExpanded.delete(questionId)
    } else {
      newExpanded.add(questionId)
    }
    setExpandedQuestions(newExpanded)
  }

  const loadDemoData = () => {
    setResponses({
      'gov-2025-1': 4,
      'gov-2025-2': 3,
      'gov-2025-3': 2,
      'gov-2025-4': 4,
      'gov-2025-5': 3,
      'sec-2025-1': 2,
      'sec-2025-2': 3,
      'sec-2025-3': 1,
      'sec-2025-4': true,
      'sec-2025-5': 3,
      'rel-2025-1': 4,
      'rel-2025-2': 3,
      'rel-2025-3': 3,
      'perf-2025-1': 2,
      'perf-2025-2': 3,
      'ops-2025-1': 4,
      'ops-2025-2': 2,
      'ops-2025-3': 3,
      'exp-2025-1': 5,
      'exp-2025-2': 3,
      'exp-2025-3': 4
    })

    // Sample notes for demonstration
    setQuestionNotes({
      'gov-2025-1': 'CoE Kit deployed in August 2024. Currently running version 3.2.1. Monthly update process established with automated Power Automate flow. Identified need to upgrade to latest version 3.3.0 for enhanced telemetry features. IT team trained on maintenance procedures.',
      'gov-2025-2': 'Managed Environments enabled for Production only. Plan to extend to UAT by Q2. Currently facing licensing constraints - need 50 additional standalone licenses. Business case approved, procurement in progress. Risk: Development teams bypassing controls.',
      'sec-2025-3': 'Customer-managed keys not implemented. Security team has approved implementation for Q2 2025. Waiting for Azure Key Vault setup completion. Dependencies: Need Azure subscription upgrade and security team resources allocated.',
      'gov-2025-5': 'Limited automation for bulk governance. Currently managing 150+ apps manually. PowerShell scripts drafted but not tested. Major gap identified during audit. Plan: Implement CoE Kit bulk management features and custom PowerShell automation by end of Q1.',
      'regional-2025-1': 'Regional compliance partially implemented. EU environments configured with GDPR controls. Asia-Pacific region pending - waiting for legal review of data residency requirements. US environments compliant with SOX. Timeline: Complete APAC implementation by March 2025.',
    })
  }

  const getStatusIcon = (value: number) => {
    if (value >= 4) return <CheckCircle className="w-5 h-5 text-green-600" />
    if (value >= 3) return <AlertCircle className="w-5 h-5 text-blue-600" />
    if (value >= 2) return <AlertTriangle className="w-5 h-5 text-yellow-600" />
    return <XCircle className="w-5 h-5 text-red-600" />
  }

  const getPillarIcon = (pillarId: string) => {
    const iconMap: Record<string, any> = {
      governance: Shield,
      security: Shield,
      reliability: Server,
      performance: Zap,
      operations: Settings,
      experience: Sparkles
    }
    const Icon = iconMap[pillarId] || BarChart3
    return Icon
  }

  const getScoreBadgeVariant = (score: string): "default" | "secondary" | "destructive" | "outline" => {
    switch (score) {
      case 'High': return 'default'
      case 'Medium': return 'secondary'
      case 'Low': return 'destructive'
      default: return 'outline'
    }
  }

  const calculateGap = (pillarId: string) => {
    const current = pillarScores[pillarId] || 0
    const expected = microsoftExpectedScores[pillarId] || 80
    return expected - current
  }

  // Handle file upload
  const handleFileUpload = (questionId: string, files: FileList | null) => {
    if (files && files.length > 0) {
      const newFiles = Array.from(files)
      setUploadedFiles(prev => ({
        ...prev,
        [questionId]: [...(prev[questionId] || []), ...newFiles]
      }))
    }
  }

  // Remove uploaded file
  const removeFile = (questionId: string, fileIndex: number) => {
    setUploadedFiles(prev => ({
      ...prev,
      [questionId]: prev[questionId]?.filter((_, index) => index !== fileIndex) || []
    }))
  }

  // Generate recommendations report
  const generateReport = () => {
    // Create report content
    const reportContent = {
      title: 'Power Platform Assessment Report',
      date: new Date().toLocaleDateString(),
      scores: {
        security: securityScore?.score || 'Not Calculated',
        maturity: maturityLevel?.name || 'Not Assessed',
        overall: overallScore,
        compliance: maturityLevel?.score || 0
      },
      pillars: assessmentPillars.map(pillar => ({
        name: pillar.name,
        score: animatedScores[pillar.id] || 0,
        gap: calculateGap(pillar.id)
      })),
      recommendations: securityScore?.recommendations || [],
      taskAssignments,
      riskOwners,
      sprintStatuses,
      taskStatuses,
      // taskTracking: Object.entries(taskTracking).map(([id, tracking]) => ({
      //   taskId: id,
      //   currentStatus: tracking.currentStatus,
      //   assignedTeam: tracking.assignedTo,
      //   estimatedHours: tracking.estimatedHours,
      //   history: tracking.history.map((h: any) => ({
      //     timestamp: h.timestamp,
      //     user: h.user,
      //     action: h.action,
      //     details: `${h.previousValue || ''} → ${h.newValue}`,
      //     comment: h.comment
      //   }))
      // })),
      // organizationFactors,
      notes: questionNotes
    }

    // Convert to JSON and trigger download
    const blob = new Blob([JSON.stringify(reportContent, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `power-platform-assessment-${new Date().toISOString().split('T')[0]}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    // Show success message
    alert('Report generated successfully! Check your downloads folder.')
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Link href="/">
                <Button variant="ghost" size="sm">
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Back to Home
                </Button>
              </Link>
              <h1 className="text-2xl font-bold">Microsoft 2025 Assessment Demo</h1>
            </div>
            <div className="flex gap-2">
              <ThemeToggle />
              <Button onClick={loadDemoData} variant="outline" size="sm">
                <Rocket className="mr-2 h-4 w-4" />
                Load Sample Data
              </Button>
              <Link href="/enterprise-demo">
                <Button variant="outline" size="sm">
                  <TrendingUp className="mr-2 h-4 w-4" />
                  Enterprise Demo
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-8">
        {/* Gradient Header Card */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-6 text-white mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold mb-2">
                Microsoft 2025 Power Platform Assessment
              </h1>
              <p className="opacity-90">
                Based on latest Microsoft Well-Architected Framework and Security Standards
              </p>
            </div>
            <div className="text-center">
              <div className="text-sm opacity-75 mb-1">Security Score</div>
              <div className="bg-white dark:bg-gray-800 rounded-lg px-6 py-3 shadow-lg">
                <div className="text-2xl font-bold text-gray-900 dark:text-white">
                  {securityScore?.score || 'Calculating...'}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={() => setActiveTab('assessment')}>
            <CardContent className="p-6 text-center">
              <BarChart3 className="w-10 h-10 text-blue-600 mx-auto mb-2" />
              <h3 className="text-2xl font-bold">{maturityLevel?.level || '-'}/5</h3>
              <p className="text-sm text-gray-600">Maturity Level</p>
              <p className="text-xs font-medium text-blue-600">{maturityLevel?.name}</p>
            </CardContent>
          </Card>

          <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={() => setActiveTab('assessment')}>
            <CardContent className="p-6 text-center">
              <Award className="w-10 h-10 text-green-600 mx-auto mb-2" />
              <h3 className="text-2xl font-bold">{maturityLevel?.score || 0}%</h3>
              <p className="text-sm text-gray-600">Compliance Score</p>
              <p className="text-xs font-medium text-green-600">
                {maturityLevel?.score >= 70 ? 'Compliant' : 'Non-Compliant'}
              </p>
            </CardContent>
          </Card>

          <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={() => setActiveTab('assessment')}>
            <CardContent className="p-6 text-center">
              <TrendingUp className="w-10 h-10 text-purple-600 mx-auto mb-2" />
              <h3 className="text-2xl font-bold">{overallScore}%</h3>
              <p className="text-sm text-gray-600">Overall Score</p>
              <p className="text-xs font-medium text-purple-600">
                {overallScore >= 80 ? 'Excellent' : overallScore >= 60 ? 'Good' : 'Needs Work'}
              </p>
            </CardContent>
          </Card>

          <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={() => setActiveTab('assessment')}>
            <CardContent className="p-6 text-center">
              <Activity className="w-10 h-10 text-amber-600 mx-auto mb-2" />
              <h3 className="text-2xl font-bold">
                {Object.keys(responses).length}/{assessmentPillars.reduce((acc, p) => acc + p.questions.length, 0)}
              </h3>
              <p className="text-sm text-gray-600">Questions Answered</p>
              <Progress 
                value={(Object.keys(responses).length / assessmentPillars.reduce((acc, p) => acc + p.questions.length, 0)) * 100} 
                className="mt-2"
              />
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="assessment">Assessment</TabsTrigger>
            <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            {/* Pillar Scores with Gap Analysis */}
            <Card>
              <CardHeader>
                <CardTitle>Gap Analysis vs Microsoft Standards</CardTitle>
                <p className="text-sm text-muted-foreground">Hover over badges for detailed breakdown</p>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {assessmentPillars.map(pillar => {
                    const score = animatedScores[pillar.id] || 0
                    const expected = microsoftExpectedScores[pillar.id] || 80
                    const gap = calculateGap(pillar.id)
                    const Icon = getPillarIcon(pillar.id)
                    
                    return (
                      <div key={pillar.id} className="flex items-center justify-between p-4 rounded-lg bg-gray-50 dark:bg-gray-800 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" onClick={() => setActiveTab('assessment')}>
                        <div className="flex items-center gap-4">
                          <Icon className="w-8 h-8 text-gray-600" />
                          <div>
                            <h4 className="font-semibold">{pillar.name}</h4>
                            <div className="flex items-center gap-2 mt-1">
                              <Progress value={score} className="w-24 h-2" />
                              <span className="text-sm font-medium">{score}%</span>
                            </div>
                          </div>
                        </div>
                        <TooltipProvider>
                          <Tooltip>
                            <TooltipTrigger>
                              <Badge 
                                variant={gap <= 0 ? "default" : gap <= 20 ? "secondary" : "destructive"}
                                className="cursor-help"
                              >
                                {gap <= 0 ? 'Met' : `-${gap}%`}
                              </Badge>
                            </TooltipTrigger>
                            <TooltipContent>
                              <div className="text-sm">
                                <p className="font-semibold mb-1">{pillar.name}</p>
                                <p>Current: {score}%</p>
                                <p>Expected: {expected}%</p>
                                <p className="font-medium mt-1">
                                  Gap: {gap <= 0 ? 'None' : `-${gap}%`}
                                </p>
                              </div>
                            </TooltipContent>
                          </Tooltip>
                        </TooltipProvider>
                      </div>
                    )
                  })}
                </div>
              </CardContent>
            </Card>

            {/* Spider Chart for Areas of Improvement */}
            <Card>
              <CardHeader>
                <CardTitle>Assessment Radar - Areas for Improvement</CardTitle>
                <p className="text-sm text-muted-foreground">Visual representation of scores across all pillars</p>
              </CardHeader>
              <CardContent>
                <div className="flex justify-center">
                  <SpiderChart 
                    data={assessmentPillars.map(pillar => ({
                      label: pillar.name,
                      value: animatedScores[pillar.id] || 0,
                      maxValue: 100
                    }))}
                    width={500}
                    height={400}
                    className="w-full max-w-lg"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Organization Profile for Time Estimates */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="w-5 h-5" />
                  Organization Profile
                </CardTitle>
                <p className="text-sm text-muted-foreground">Configure your organization to get accurate time estimates</p>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  <div className="space-y-2">
                    <Label className="text-xs">Organization Size</Label>
                    <Select
                      value={organizationFactors.organizationSize}
                      onValueChange={(value: any) => setOrganizationFactors(prev => ({ ...prev, organizationSize: value }))}
                    >
                      <SelectTrigger className="h-8 text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="small">Small (<100)</SelectItem>
                        <SelectItem value="medium">Medium (100-1000)</SelectItem>
                        <SelectItem value="large">Large (1000-10k)</SelectItem>
                        <SelectItem value="enterprise">Enterprise (10k+)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-xs">Team Experience</Label>
                    <Select
                      value={organizationFactors.teamExperience}
                      onValueChange={(value: any) => setOrganizationFactors(prev => ({ ...prev, teamExperience: value }))}
                    >
                      <SelectTrigger className="h-8 text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="beginner">Beginner</SelectItem>
                        <SelectItem value="intermediate">Intermediate</SelectItem>
                        <SelectItem value="advanced">Advanced</SelectItem>
                        <SelectItem value="expert">Expert</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-xs">Infrastructure</Label>
                    <Select
                      value={organizationFactors.existingInfrastructure}
                      onValueChange={(value: any) => setOrganizationFactors(prev => ({ ...prev, existingInfrastructure: value }))}
                    >
                      <SelectTrigger className="h-8 text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="none">None</SelectItem>
                        <SelectItem value="basic">Basic</SelectItem>
                        <SelectItem value="moderate">Moderate</SelectItem>
                        <SelectItem value="mature">Mature</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-xs">Compliance</Label>
                    <Select
                      value={organizationFactors.complianceRequirements}
                      onValueChange={(value: any) => setOrganizationFactors(prev => ({ ...prev, complianceRequirements: value }))}
                    >
                      <SelectTrigger className="h-8 text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="low">Low</SelectItem>
                        <SelectItem value="medium">Medium</SelectItem>
                        <SelectItem value="high">High</SelectItem>
                        <SelectItem value="critical">Critical</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label className="text-xs">Change Complexity</Label>
                    <Select
                      value={organizationFactors.changeManagementComplexity}
                      onValueChange={(value: any) => setOrganizationFactors(prev => ({ ...prev, changeManagementComplexity: value }))}
                    >
                      <SelectTrigger className="h-8 text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="simple">Simple</SelectItem>
                        <SelectItem value="moderate">Moderate</SelectItem>
                        <SelectItem value="complex">Complex</SelectItem>
                        <SelectItem value="very_complex">Very Complex</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                  <p className="text-xs text-blue-900 dark:text-blue-100">
                    <strong>Time Estimate Impact:</strong> Based on your profile, task estimates will be adjusted automatically. 
                    For example, a baseline 16h task might become {calculateAdaptiveEstimate(16, organizationFactors)}h for your organization.
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Radial Progress Charts */}
            <Card>
              <CardHeader>
                <CardTitle>Key Performance Indicators</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex justify-around items-center">
                  <RadialChart 
                    value={securityScore?.percentage || 0} 
                    label="Security" 
                    color="#3b82f6" 
                  />
                  <RadialChart 
                    value={maturityLevel?.score || 0} 
                    label="Maturity" 
                    color="#10b981" 
                  />
                  <RadialChart 
                    value={overallScore} 
                    label="Overall" 
                    color="#8b5cf6" 
                  />
                </div>
              </CardContent>
            </Card>

            {/* Feature Grid */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <Card className="border-blue-200 dark:border-blue-800">
                <CardContent className="p-4">
                  <Shield className="w-8 h-8 text-blue-600 mb-2" />
                  <h3 className="font-semibold">Security-First</h3>
                  <p className="text-sm text-muted-foreground">Low/Medium/High scoring</p>
                </CardContent>
              </Card>
              <Card className="border-green-200 dark:border-green-800">
                <CardContent className="p-4">
                  <Target className="w-8 h-8 text-green-600 mb-2" />
                  <h3 className="font-semibold">5-Level Maturity</h3>
                  <p className="text-sm text-muted-foreground">Initial to Efficient</p>
                </CardContent>
              </Card>
              <Card className="border-purple-200 dark:border-purple-800">
                <CardContent className="p-4">
                  <BarChart3 className="w-8 h-8 text-purple-600 mb-2" />
                  <h3 className="font-semibold">6 Pillars</h3>
                  <p className="text-sm text-muted-foreground">Comprehensive coverage</p>
                </CardContent>
              </Card>
              <Card className="border-amber-200 dark:border-amber-800">
                <CardContent className="p-4">
                  <FileText className="w-8 h-8 text-amber-600 mb-2" />
                  <h3 className="font-semibold">Board-Ready</h3>
                  <p className="text-sm text-muted-foreground">Executive reporting</p>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="assessment" className="space-y-4">
            {/* Assessment Pillars */}
            {assessmentPillars.map(pillar => {
              const Icon = getPillarIcon(pillar.id)
              const score = pillarScores[pillar.id] || 0
              
              return (
                <Card key={pillar.id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className={`p-2 rounded-lg ${
                          score >= 80 ? 'bg-green-100 text-green-600' :
                          score >= 60 ? 'bg-blue-100 text-blue-600' :
                          score >= 40 ? 'bg-yellow-100 text-yellow-600' :
                          'bg-red-100 text-red-600'
                        }`}>
                          <Icon className="w-6 h-6" />
                        </div>
                        <div>
                          <CardTitle>{pillar.name}</CardTitle>
                          <p className="text-sm text-muted-foreground">{pillar.description}</p>
                        </div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold">{score}%</div>
                        <p className="text-xs text-muted-foreground">Pillar Score</p>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {pillar.id === 'governance' ? enhancedGovernanceQuestions.map(question => {
                      const value = responses[question.id] || 0
                      const isExpanded = expandedQuestions.has(question.id)
                      
                      return (
                        <div key={question.id} className="border rounded-lg p-4 space-y-3">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <h4 className="font-medium flex items-center gap-2">
                                {question.text}
                                {question.required && (
                                  <Badge variant="destructive" className="text-xs">Required</Badge>
                                )}
                              </h4>
                              <p className="text-sm text-muted-foreground mt-1">
                                {question.description}
                              </p>
                            </div>
                            {value > 0 && getStatusIcon(value)}
                          </div>

                          {/* Scale Input */}
                          <div>
                            <div className="flex items-center justify-between text-sm mb-2">
                              <span>Not at all</span>
                              <span>Completely</span>
                            </div>
                            <input
                              type="range"
                              min="1"
                              max="5"
                              value={value || 1}
                              onChange={(e) => setResponses(prev => ({
                                ...prev,
                                [question.id]: parseInt(e.target.value)
                              }))}
                              className="w-full h-2 bg-gray-200 rounded-lg cursor-pointer range-slider"
                              style={{
                                opacity: 1,
                                visibility: 'visible'
                              }}
                            />
                            <div className="flex justify-between text-xs mt-1">
                              {[1, 2, 3, 4, 5].map(n => (
                                <span key={n}>{n}</span>
                              ))}
                            </div>
                          </div>

                          {/* File Upload for Evidence */}
                          <div className="space-y-2">
                            <label className="text-sm font-medium">Upload Evidence Documents</label>
                            <div className="flex gap-2">
                              <input
                                type="file"
                                multiple
                                accept=".pdf,.doc,.docx,.txt,.png,.jpg,.jpeg,.gif"
                                onChange={(e) => handleFileUpload(question.id, e.target.files)}
                                className="hidden"
                                id={`file-upload-${question.id}`}
                              />
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => document.getElementById(`file-upload-${question.id}`)?.click()}
                              >
                                <Upload className="w-4 h-4 mr-2" />
                                Upload Files
                              </Button>
                            </div>
                            {uploadedFiles[question.id] && uploadedFiles[question.id].length > 0 && (
                              <div className="space-y-1">
                                {uploadedFiles[question.id].map((file, index) => (
                                  <div key={index} className="flex items-center justify-between bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 p-2 rounded text-sm">
                                    <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                                      <FileText className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                                      <span className="truncate font-medium">{file.name}</span>
                                      <Badge variant="secondary" className="text-xs">
                                        {(file.size / 1024).toFixed(1)} KB
                                      </Badge>
                                    </div>
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => removeFile(question.id, index)}
                                      className="text-red-500 hover:text-red-600 dark:text-red-400 dark:hover:text-red-300"
                                    >
                                      <X className="w-3 h-3" />
                                    </Button>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Notes Section */}
                          <div className="space-y-2">
                            <label className="text-sm font-medium flex items-center gap-2">
                              <ClipboardList className="w-4 h-4" />
                              Assessment Notes & Reasoning
                            </label>
                            <textarea
                              className="w-full min-h-[100px] p-3 text-sm border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="Document your reasoning for this score. Include:
• Current state assessment
• Evidence reviewed
• Gaps identified
• Planned actions
• Timeline considerations
• Dependencies or blockers"
                              value={questionNotes[question.id] || ''}
                              onChange={(e) => setQuestionNotes(prev => ({
                                ...prev,
                                [question.id]: e.target.value
                              }))}
                            />
                            <div className="flex justify-between text-xs text-gray-500">
                              <span>{(questionNotes[question.id] || '').length} characters</span>
                              <span>Notes are saved automatically</span>
                            </div>
                          </div>

                          {/* Best Practice */}
                          {question.bestPractice && (
                            <Alert>
                              <Lightbulb className="h-4 w-4" />
                              <AlertDescription>
                                <strong>Best Practice:</strong> {question.bestPractice}
                              </AlertDescription>
                            </Alert>
                          )}

                          {/* Guidance Button */}
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => toggleQuestionExpanded(question.id)}
                            className="w-full"
                          >
                            {isExpanded ? 'Hide' : 'Show'} Detailed Guidance
                            <ChevronRight className={`ml-2 h-4 w-4 transition-transform ${isExpanded ? 'rotate-90' : ''}`} />
                          </Button>

                          {/* Expanded Guidance */}
                          {isExpanded && (
                            <Tabs defaultValue="location" className="mt-4">
                              <TabsList className="grid grid-cols-4 w-full">
                                <TabsTrigger value="location">Where</TabsTrigger>
                                <TabsTrigger value="steps">Steps</TabsTrigger>
                                <TabsTrigger value="issues">Issues</TabsTrigger>
                                <TabsTrigger value="docs">Docs</TabsTrigger>
                              </TabsList>
                              
                              <TabsContent value="location" className="mt-3 space-y-2">
                                {question.tenantLocation?.map((loc, idx) => (
                                  <div key={idx} className="flex items-start gap-2">
                                    <MapPin className="w-4 h-4 text-muted-foreground mt-0.5" />
                                    <code className="text-sm bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded flex-1">
                                      {loc}
                                    </code>
                                  </div>
                                ))}
                              </TabsContent>
                              
                              <TabsContent value="steps" className="mt-3 space-y-2">
                                {question.implementationSteps?.map((step, idx) => (
                                  <div key={idx} className="flex gap-2">
                                    <Badge variant="outline">{idx + 1}</Badge>
                                    <span className="text-sm">{step}</span>
                                  </div>
                                ))}
                              </TabsContent>
                              
                              <TabsContent value="issues" className="mt-3 space-y-2">
                                {question.commonIssues?.map((issue, idx) => (
                                  <Alert key={idx} className="py-2">
                                    <AlertTriangle className="h-4 w-4" />
                                    <AlertDescription className="text-sm">{issue}</AlertDescription>
                                  </Alert>
                                ))}
                              </TabsContent>
                              
                              <TabsContent value="docs" className="mt-3 space-y-2">
                                {question.microsoftDocs?.map((doc, idx) => (
                                  <a
                                    key={idx}
                                    href={doc}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="flex items-center gap-2 text-sm text-blue-600 hover:underline"
                                  >
                                    <ExternalLink className="w-3 h-3" />
                                    {doc.replace('https://learn.microsoft.com/', 'MS Learn: ')}
                                  </a>
                                ))}
                              </TabsContent>
                            </Tabs>
                          )}
                        </div>
                      )
                    }) : pillar.questions.map(question => {
                      const value = responses[question.id] || 0
                      const isExpanded = expandedQuestions.has(question.id)
                      
                      return (
                        <div key={question.id} className="border rounded-lg p-4 space-y-3">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <h4 className="font-medium flex items-center gap-2">
                                {question.text}
                                {question.required && (
                                  <Badge variant="destructive" className="text-xs">Required</Badge>
                                )}
                              </h4>
                              <p className="text-sm text-muted-foreground mt-1">
                                {question.description}
                              </p>
                            </div>
                            {value > 0 && getStatusIcon(value)}
                          </div>

                          {/* Scale Input for all questions */}
                          <div>
                            <div className="flex items-center justify-between text-sm mb-2">
                              <span>Not at all</span>
                              <span>Completely</span>
                            </div>
                            <input
                              type="range"
                              min="1"
                              max="5"
                              value={value || 1}
                              onChange={(e) => setResponses(prev => ({
                                ...prev,
                                [question.id]: parseInt(e.target.value)
                              }))}
                              className="w-full h-2 bg-gray-200 rounded-lg cursor-pointer range-slider"
                              style={{
                                opacity: 1,
                                visibility: 'visible'
                              }}
                            />
                            <div className="flex justify-between text-xs mt-1">
                              {[1, 2, 3, 4, 5].map(n => (
                                <span key={n}>{n}</span>
                              ))}
                            </div>
                          </div>

                          {/* File Upload for Evidence */}
                          <div className="space-y-2">
                            <label className="text-sm font-medium">Upload Evidence Documents</label>
                            <div className="flex gap-2">
                              <input
                                type="file"
                                multiple
                                accept=".pdf,.doc,.docx,.txt,.png,.jpg,.jpeg,.gif"
                                onChange={(e) => handleFileUpload(question.id, e.target.files)}
                                className="hidden"
                                id={`file-upload-${question.id}`}
                              />
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => document.getElementById(`file-upload-${question.id}`)?.click()}
                              >
                                <Upload className="w-4 h-4 mr-2" />
                                Upload Files
                              </Button>
                            </div>
                            {uploadedFiles[question.id] && uploadedFiles[question.id].length > 0 && (
                              <div className="space-y-1">
                                {uploadedFiles[question.id].map((file, index) => (
                                  <div key={index} className="flex items-center justify-between bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 p-2 rounded text-sm">
                                    <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                                      <FileText className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                                      <span className="truncate font-medium">{file.name}</span>
                                      <Badge variant="secondary" className="text-xs">
                                        {(file.size / 1024).toFixed(1)} KB
                                      </Badge>
                                    </div>
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => removeFile(question.id, index)}
                                      className="text-red-500 hover:text-red-600 dark:text-red-400 dark:hover:text-red-300"
                                    >
                                      <X className="w-3 h-3" />
                                    </Button>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Notes Section */}
                          <div className="space-y-2">
                            <label className="text-sm font-medium flex items-center gap-2">
                              <ClipboardList className="w-4 h-4" />
                              Assessment Notes & Reasoning
                            </label>
                            <textarea
                              className="w-full min-h-[100px] p-3 text-sm border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="Document your reasoning for this score. Include:
• Current state assessment
• Evidence reviewed
• Gaps identified
• Planned actions
• Timeline considerations
• Dependencies or blockers"
                              value={questionNotes[question.id] || ''}
                              onChange={(e) => setQuestionNotes(prev => ({
                                ...prev,
                                [question.id]: e.target.value
                              }))}
                            />
                            <div className="flex justify-between text-xs text-gray-500">
                              <span>{(questionNotes[question.id] || '').length} characters</span>
                              <span>Notes are saved automatically</span>
                            </div>
                          </div>

                          {/* Best Practice if available */}
                          {question.bestPractice && (
                            <Alert>
                              <Lightbulb className="h-4 w-4" />
                              <AlertDescription>
                                <strong>Best Practice:</strong> {question.bestPractice}
                              </AlertDescription>
                            </Alert>
                          )}

                          {/* Comprehensive Guidance */}
                          {question.guidance && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => toggleQuestionExpanded(question.id)}
                              className="w-full"
                            >
                              {isExpanded ? 'Hide' : 'Show'} Guidance
                              <ChevronRight className={`ml-2 h-4 w-4 transition-transform ${isExpanded ? 'rotate-90' : ''}`} />
                            </Button>
                          )}

                          {isExpanded && (
                            <Tabs defaultValue="guidance" className="mt-4">
                              <TabsList className="grid grid-cols-5 w-full">
                                <TabsTrigger value="guidance">Guidance</TabsTrigger>
                                <TabsTrigger value="where">Where</TabsTrigger>
                                <TabsTrigger value="steps">Steps</TabsTrigger>
                                <TabsTrigger value="issues">Issues</TabsTrigger>
                                <TabsTrigger value="docs">Docs</TabsTrigger>
                              </TabsList>

                              <TabsContent value="guidance" className="mt-3">
                                <Alert>
                                  <Info className="h-4 w-4" />
                                  <AlertDescription>
                                    <div className="space-y-2">
                                      <p>{question.guidance}</p>
                                      {question.bestPractice && (
                                        <div className="mt-2 pt-2 border-t">
                                          <p className="font-medium">Best Practice:</p>
                                          <p className="text-sm">{question.bestPractice}</p>
                                        </div>
                                      )}
                                    </div>
                                  </AlertDescription>
                                </Alert>
                              </TabsContent>

                              <TabsContent value="where" className="mt-3">
                                <div className="space-y-2">
                                  <h5 className="font-medium text-sm flex items-center gap-2">
                                    <MapPin className="w-4 h-4" />
                                    Where to Find in Tenant
                                  </h5>
                                  <div className="space-y-2">
                                    <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg space-y-1 text-sm">
                                      <p className="font-medium">Power Platform Admin Center:</p>
                                      <p className="text-muted-foreground">Navigate to admin.powerplatform.microsoft.com</p>
                                    </div>
                                    <div className="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg space-y-1 text-sm">
                                      <p className="font-medium">For this feature:</p>
                                      <p className="text-muted-foreground">
                                        {question.category === 'Governance' ? 'Policies > Data policies > Settings' :
                                         question.category === 'Security' ? 'Settings > Security > Configuration' :
                                         question.category === 'Reliability' ? 'Environments > [Environment] > Settings' :
                                         question.category === 'Performance' ? 'Analytics > Performance metrics' :
                                         'Settings > Administration'}
                                      </p>
                                    </div>
                                  </div>
                                </div>
                              </TabsContent>

                              <TabsContent value="steps" className="mt-3">
                                <div className="space-y-2">
                                  <h5 className="font-medium text-sm flex items-center gap-2">
                                    <ClipboardList className="w-4 h-4" />
                                    Implementation Steps
                                  </h5>
                                  <ol className="space-y-2 text-sm">
                                    <li className="flex gap-2">
                                      <Badge variant="outline" className="text-xs shrink-0">1</Badge>
                                      <span>Assess current state and document requirements</span>
                                    </li>
                                    <li className="flex gap-2">
                                      <Badge variant="outline" className="text-xs shrink-0">2</Badge>
                                      <span>Configure in test environment first</span>
                                    </li>
                                    <li className="flex gap-2">
                                      <Badge variant="outline" className="text-xs shrink-0">3</Badge>
                                      <span>Validate with stakeholders and security team</span>
                                    </li>
                                    <li className="flex gap-2">
                                      <Badge variant="outline" className="text-xs shrink-0">4</Badge>
                                      <span>Deploy to production with monitoring</span>
                                    </li>
                                    <li className="flex gap-2">
                                      <Badge variant="outline" className="text-xs shrink-0">5</Badge>
                                      <span>Document configuration and train users</span>
                                    </li>
                                  </ol>
                                </div>
                              </TabsContent>

                              <TabsContent value="issues" className="mt-3">
                                <div className="space-y-2">
                                  <h5 className="font-medium text-sm flex items-center gap-2">
                                    <AlertTriangle className="w-4 h-4 text-orange-600" />
                                    Common Issues & Solutions
                                  </h5>
                                  <div className="space-y-2">
                                    <Alert>
                                      <AlertTriangle className="h-4 w-4" />
                                      <AlertDescription>
                                        <p className="font-medium">Configuration Complexity</p>
                                        <p className="text-sm">Start with basic settings and gradually add complexity</p>
                                      </AlertDescription>
                                    </Alert>
                                    <Alert>
                                      <AlertTriangle className="h-4 w-4" />
                                      <AlertDescription>
                                        <p className="font-medium">User Impact</p>
                                        <p className="text-sm">Test thoroughly and communicate changes in advance</p>
                                      </AlertDescription>
                                    </Alert>
                                    <Alert>
                                      <AlertTriangle className="h-4 w-4" />
                                      <AlertDescription>
                                        <p className="font-medium">Performance Considerations</p>
                                        <p className="text-sm">Monitor system performance after implementation</p>
                                      </AlertDescription>
                                    </Alert>
                                  </div>
                                </div>
                              </TabsContent>

                              <TabsContent value="docs" className="mt-3">
                                <div className="space-y-2">
                                  <h5 className="font-medium text-sm flex items-center gap-2">
                                    <ExternalLink className="w-4 h-4" />
                                    Microsoft Documentation
                                  </h5>
                                  <div className="space-y-2">
                                    <a
                                      href={`https://learn.microsoft.com/en-us/power-platform/admin/${
                                        question.category === 'Governance' ? 'governance-considerations' :
                                        question.category === 'Security' ? 'security/overview' :
                                        question.category === 'Reliability' ? 'backup-restore-environments' :
                                        question.category === 'Performance' ? 'performance-tips' :
                                        'admin-documentation'
                                      }`}
                                      target="_blank"
                                      rel="noopener noreferrer"
                                      className="flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
                                    >
                                      <ExternalLink className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                                      <div>
                                        <p className="font-medium text-sm text-blue-900 dark:text-blue-100">
                                          {question.category} Best Practices
                                        </p>
                                        <p className="text-xs text-blue-700 dark:text-blue-300">
                                          Official Microsoft Learn documentation
                                        </p>
                                      </div>
                                    </a>
                                    <a
                                      href="https://learn.microsoft.com/en-us/power-platform/guidance/adoption/admin-best-practices"
                                      target="_blank"
                                      rel="noopener noreferrer"
                                      className="flex items-center gap-2 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                                    >
                                      <ExternalLink className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                                      <div>
                                        <p className="font-medium text-sm">Admin Best Practices</p>
                                        <p className="text-xs text-muted-foreground">General guidance for administrators</p>
                                      </div>
                                    </a>
                                    <a
                                      href="https://aka.ms/ppac"
                                      target="_blank"
                                      rel="noopener noreferrer"
                                      className="flex items-center gap-2 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                                    >
                                      <ExternalLink className="w-4 h-4 text-gray-600 dark:text-gray-400" />
                                      <div>
                                        <p className="font-medium text-sm">Power Platform Admin Center</p>
                                        <p className="text-xs text-muted-foreground">Direct link to admin portal</p>
                                      </div>
                                    </a>
                                  </div>
                                </div>
                              </TabsContent>
                            </Tabs>
                          )}
                        </div>
                      )
                    })}
                  </CardContent>
                </Card>
              )
            })}
          </TabsContent>

          <TabsContent value="recommendations" className="space-y-4">
            {/* Report Generation Button */}
            <div className="flex justify-end mb-4">
              <Button 
                onClick={() => generateReport()}
                variant="outline"
                className="flex items-center gap-2"
              >
                <FileText className="w-4 h-4" />
                Generate Report
              </Button>
            </div>

            {/* Security Recommendations */}
            {securityScore && securityScore.recommendations && securityScore.recommendations.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Shield className="w-5 h-5 text-amber-600" />
                    Security Recommendations
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {securityScore.recommendations.map((rec, index) => (
                      <Card key={index} className="border-l-4 border-l-blue-500">
                        <CardContent className="p-4">
                          <div className="space-y-3">
                            {/* Header */}
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-2">
                                <Badge variant="outline" className="text-xs">
                                  {rec.category}
                                </Badge>
                                <span className="font-medium">{rec.title}</span>
                              </div>
                              <div className="flex gap-2">
                                <Badge variant={rec.impact === 'High' ? 'destructive' : rec.impact === 'Medium' ? 'secondary' : 'default'}>
                                  {rec.impact} Impact
                                </Badge>
                                <Badge variant="outline">
                                  {rec.effort} Effort
                                </Badge>
                              </div>
                            </div>

                            {/* Description */}
                            <p className="text-sm text-muted-foreground">{rec.description}</p>

                            {/* Action Items */}
                            <div>
                              <h5 className="font-medium text-sm mb-2">Action Items</h5>
                              <ul className="text-sm space-y-1">
                                {rec.actionItems?.map((action, i) => (
                                  <li key={i} className="flex items-start gap-2">
                                    <CheckCircle className="w-3 h-3 text-green-600 mt-1" />
                                    <span>{action}</span>
                                  </li>
                                ))}
                              </ul>
                            </div>

                            {/* Expand Button */}
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => setExpandedRecommendation(expandedRecommendation === index ? null : index)}
                              className="w-full justify-between"
                            >
                              {expandedRecommendation === index ? 'Hide' : 'Show'} Implementation Details
                              <ChevronRight className={`h-4 w-4 transition-transform ${expandedRecommendation === index ? 'rotate-90' : ''}`} />
                            </Button>

                            {/* Expanded Details */}
                            {expandedRecommendation === index && rec.evidenceCriteria && rec.implementationRoadmap && (
                              <Tabs defaultValue="evidence" className="mt-4">
                                <TabsList className="grid grid-cols-3 w-full">
                                  <TabsTrigger value="evidence">Evidence Criteria</TabsTrigger>
                                  <TabsTrigger value="roadmap">Implementation Roadmap</TabsTrigger>
                                  <TabsTrigger value="guide">How-To Guide</TabsTrigger>
                                </TabsList>

                                <TabsContent value="evidence" className="mt-3 space-y-3">
                                  {/* Required Evidence */}
                                  <div>
                                    <h6 className="font-medium text-sm mb-2 flex items-center gap-2">
                                      <AlertTriangle className="w-4 h-4 text-orange-600 dark:text-orange-400" />
                                      Required Evidence
                                    </h6>
                                    <ul className="text-sm space-y-1">
                                      {rec.evidenceCriteria.required.map((item, i) => (
                                        <li key={i} className="flex items-start gap-2">
                                          <Badge variant="destructive" className="text-xs">Required</Badge>
                                          <span>{item}</span>
                                        </li>
                                      ))}
                                    </ul>
                                  </div>

                                  {/* Optional Evidence */}
                                  <div>
                                    <h6 className="font-medium text-sm mb-2 flex items-center gap-2">
                                      <Info className="w-4 h-4 text-blue-600" />
                                      Optional Evidence
                                    </h6>
                                    <ul className="text-sm space-y-1">
                                      {rec.evidenceCriteria.optional.map((item, i) => (
                                        <li key={i} className="flex items-start gap-2">
                                          <Badge variant="secondary" className="text-xs">Optional</Badge>
                                          <span>{item}</span>
                                        </li>
                                      ))}
                                    </ul>
                                  </div>

                                  {/* Accepted Formats */}
                                  <div>
                                    <h6 className="font-medium text-sm mb-2">Accepted File Formats</h6>
                                    <div className="flex gap-1 flex-wrap">
                                      {rec.evidenceCriteria.formats.map((format, i) => (
                                        <Badge key={i} variant="outline" className="text-xs">
                                          {format}
                                        </Badge>
                                      ))}
                                    </div>
                                  </div>

                                  {/* Validation Steps */}
                                  <div>
                                    <h6 className="font-medium text-sm mb-2">Validation Steps</h6>
                                    <ol className="text-sm space-y-1">
                                      {rec.evidenceCriteria.validationSteps.map((step, i) => (
                                        <li key={i} className="flex gap-2">
                                          <Badge variant="outline" className="text-xs">{i + 1}</Badge>
                                          <span>{step}</span>
                                        </li>
                                      ))}
                                    </ol>
                                  </div>
                                </TabsContent>

                                <TabsContent value="roadmap" className="mt-3 space-y-4">
                                  {/* Roadmap Overview */}
                                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                    <div>
                                      <h6 className="font-medium mb-1">Total Duration</h6>
                                      <Badge variant="outline">{rec.implementationRoadmap.totalDuration}</Badge>
                                    </div>
                                    <div>
                                      <h6 className="font-medium mb-1">Prerequisites</h6>
                                      <ul className="space-y-1">
                                        {rec.implementationRoadmap.prerequisites.map((prereq, i) => (
                                          <li key={i} className="text-xs">• {prereq}</li>
                                        ))}
                                      </ul>
                                    </div>
                                    <div>
                                      <h6 className="font-medium mb-1">Risks & Ownership</h6>
                                      <ul className="space-y-2">
                                        {rec.implementationRoadmap.risks.map((risk, i) => (
                                          <li key={i} className="text-xs">
                                            <div className="flex items-center gap-1">
                                              <span className="text-orange-600 dark:text-orange-400">⚠ {risk}</span>
                                            </div>
                                            <div className="flex items-center gap-2 mt-1">
                                              <span className="text-muted-foreground">Owner:</span>
                                              <Input
                                                type="text"
                                                value={riskOwners[`${rec.title}-risk-${i}`] || ''}
                                                onChange={(e) => setRiskOwners(prev => ({
                                                  ...prev,
                                                  [`${rec.title}-risk-${i}`]: e.target.value
                                                }))}
                                                placeholder="Risk owner"
                                                className="h-5 w-24 text-xs"
                                              />
                                            </div>
                                          </li>
                                        ))}
                                      </ul>
                                    </div>
                                  </div>

                                  {/* Implementation Phases */}
                                  <div>
                                    <h6 className="font-medium mb-3">Implementation Phases</h6>
                                    <div className="space-y-3">
                                      {rec.implementationRoadmap.phases.map((phase, i) => (
                                        <div key={i} className="border rounded-lg p-3">
                                          <div className="flex items-center justify-between mb-2">
                                            <div className="flex items-center gap-2">
                                              <Badge variant="outline">Phase {phase.phase}</Badge>
                                              <span className="font-medium text-sm">{phase.name}</span>
                                            </div>
                                            <div className="flex gap-2">
                                              <Select
                                                value={sprintStatuses[`${rec.title}-phase-${i}`] || phase.sprintStatus}
                                                onValueChange={(value) => setSprintStatuses(prev => ({
                                                  ...prev,
                                                  [`${rec.title}-phase-${i}`]: value
                                                }))}
                                              >
                                                <SelectTrigger className="w-32 h-7 text-xs">
                                                  <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent>
                                                  <SelectItem value="Not Started">Not Started</SelectItem>
                                                  <SelectItem value="Planning">Planning</SelectItem>
                                                  <SelectItem value="In Progress">In Progress</SelectItem>
                                                  <SelectItem value="Completed">Completed</SelectItem>
                                                  <SelectItem value="Blocked">Blocked</SelectItem>
                                                </SelectContent>
                                              </Select>
                                              <Badge variant="outline" className="text-xs">
                                                {phase.duration}
                                              </Badge>
                                            </div>
                                          </div>

                                          {/* Tasks */}
                                          <div className="space-y-2">
                                            {phase.tasks.map((task, j) => {
                                              // Initialize or get task tracking
                                              if (!taskTracking[task.id]) {
                                                const tracking = initializeTaskTracking(
                                                  task.id,
                                                  task.name,
                                                  task.assignedTo,
                                                  organizationFactors
                                                )
                                                setTaskTracking(prev => ({ ...prev, [task.id]: tracking }))
                                              }
                                              
                                              const tracking = taskTracking[task.id] || initializeTaskTracking(
                                                task.id,
                                                task.name,
                                                task.assignedTo,
                                                organizationFactors
                                              )
                                              
                                              // Calculate adaptive hours
                                              const taskType = getTaskType(task.name)
                                              const baselineHours = baselineEstimates[taskType] || task.estimatedHours
                                              const adaptiveHours = calculateAdaptiveEstimate(baselineHours, organizationFactors)
                                              
                                              return (
                                                <div key={j} className="bg-gray-50 dark:bg-gray-800 p-3 rounded">
                                                  <div className="flex items-start justify-between">
                                                    <div className="flex-1 space-y-2">
                                                      <div>
                                                        <div className="font-medium text-sm">{task.name}</div>
                                                        <div className="text-xs text-muted-foreground">{task.description}</div>
                                                      </div>
                                                      
                                                      <div className="flex items-center gap-4 text-xs">
                                                        <div className="flex items-center gap-2">
                                                          <span className="text-muted-foreground">Lead:</span>
                                                          <span className="font-medium">{tracking.assignedTo[0]}</span>
                                                        </div>
                                                        
                                                        <div className="flex items-center gap-1">
                                                          <span className="text-muted-foreground">Est:</span>
                                                          <span className="font-medium">{adaptiveHours}h</span>
                                                          {adaptiveHours !== task.estimatedHours && (
                                                            <span className="text-muted-foreground">
                                                              (baseline: {task.estimatedHours}h)
                                                            </span>
                                                          )}
                                                        </div>
                                                      </div>
                                                    </div>
                                                    
                                                    <TaskStatusWithTracking
                                                      task={task}
                                                      tracking={tracking}
                                                      onStatusChange={(status) => {
                                                        const updated = { ...tracking, currentStatus: status }
                                                        setTaskTracking(prev => ({ ...prev, [task.id]: updated }))
                                                      }}
                                                      onTrackingUpdate={(updated) => {
                                                        setTaskTracking(prev => ({ ...prev, [task.id]: updated }))
                                                      }}
                                                      currentUser="Current User"
                                                    />
                                                  </div>
                                                </div>
                                              )
                                            })}
                                          </div>

                                          {/* Deliverables */}
                                          <div className="mt-2">
                                            <h7 className="font-medium text-xs text-muted-foreground">Deliverables:</h7>
                                            <div className="flex gap-1 mt-1">
                                              {phase.deliverables.map((deliverable, j) => (
                                                <Badge key={j} variant="secondary" className="text-xs">
                                                  {deliverable}
                                                </Badge>
                                              ))}
                                            </div>
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                </TabsContent>

                                <TabsContent value="guide" className="mt-3 space-y-4">
                                  <div className="space-y-4">
                                    <h6 className="font-medium">Implementation Best Practices</h6>
                                    
                                    {/* Microsoft Documentation Links */}
                                    <div>
                                      <h7 className="text-sm font-medium mb-2 flex items-center gap-2">
                                        <ExternalLink className="w-4 h-4" />
                                        Microsoft Documentation
                                      </h7>
                                      <div className="space-y-2">
                                        <a 
                                          href="https://learn.microsoft.com/en-us/power-platform/guidance/adoption/admin-best-practices"
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          className="flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                                        >
                                          <ExternalLink className="w-3 h-3" />
                                          Power Platform Admin Best Practices
                                        </a>
                                        <a 
                                          href="https://learn.microsoft.com/en-us/power-platform/guidance/coe/starter-kit"
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          className="flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                                        >
                                          <ExternalLink className="w-3 h-3" />
                                          Center of Excellence Starter Kit
                                        </a>
                                        <a 
                                          href="https://learn.microsoft.com/en-us/power-platform/admin/security-overview"
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          className="flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                                        >
                                          <ExternalLink className="w-3 h-3" />
                                          Security & Compliance Overview
                                        </a>
                                      </div>
                                    </div>

                                    {/* Step-by-Step Guide */}
                                    <div>
                                      <h7 className="text-sm font-medium mb-2">Step-by-Step Implementation</h7>
                                      <ol className="space-y-3 text-sm">
                                        <li className="flex gap-2">
                                          <Badge variant="outline" className="text-xs shrink-0">1</Badge>
                                          <div>
                                            <p className="font-medium">Establish Governance Team</p>
                                            <p className="text-muted-foreground text-xs mt-1">
                                              Form a cross-functional team including IT, Security, and Business stakeholders.
                                              <a href="https://learn.microsoft.com/en-us/power-platform/guidance/adoption/establish-coe" className="text-blue-600 ml-1" target="_blank" rel="noopener noreferrer">Learn more</a>
                                            </p>
                                          </div>
                                        </li>
                                        <li className="flex gap-2">
                                          <Badge variant="outline" className="text-xs shrink-0">2</Badge>
                                          <div>
                                            <p className="font-medium">Deploy CoE Starter Kit</p>
                                            <p className="text-muted-foreground text-xs mt-1">
                                              Install Core, Governance, and Nurture components in production environments.
                                              <a href="https://learn.microsoft.com/en-us/power-platform/guidance/coe/setup" className="text-blue-600 ml-1" target="_blank" rel="noopener noreferrer">Setup guide</a>
                                            </p>
                                          </div>
                                        </li>
                                        <li className="flex gap-2">
                                          <Badge variant="outline" className="text-xs shrink-0">3</Badge>
                                          <div>
                                            <p className="font-medium">Configure DLP Policies</p>
                                            <p className="text-muted-foreground text-xs mt-1">
                                              Start with restrictive policies and gradually open based on business needs.
                                              <a href="https://learn.microsoft.com/en-us/power-platform/admin/wp-data-loss-prevention" className="text-blue-600 ml-1" target="_blank" rel="noopener noreferrer">DLP guide</a>
                                            </p>
                                          </div>
                                        </li>
                                        <li className="flex gap-2">
                                          <Badge variant="outline" className="text-xs shrink-0">4</Badge>
                                          <div>
                                            <p className="font-medium">Enable Managed Environments</p>
                                            <p className="text-muted-foreground text-xs mt-1">
                                              Turn on for production environments to enforce governance controls.
                                              <a href="https://learn.microsoft.com/en-us/power-platform/admin/managed-environment-overview" className="text-blue-600 ml-1" target="_blank" rel="noopener noreferrer">Managed environments</a>
                                            </p>
                                          </div>
                                        </li>
                                        <li className="flex gap-2">
                                          <Badge variant="outline" className="text-xs shrink-0">5</Badge>
                                          <div>
                                            <p className="font-medium">Monitor & Optimize</p>
                                            <p className="text-muted-foreground text-xs mt-1">
                                              Use Security Hub and CoE analytics to continuously improve governance.
                                              <a href="https://learn.microsoft.com/en-us/power-platform/admin/security/security-overview" className="text-blue-600 ml-1" target="_blank" rel="noopener noreferrer">Security Hub</a>
                                            </p>
                                          </div>
                                        </li>
                                      </ol>
                                    </div>

                                    {/* Common Pitfalls */}
                                    <div>
                                      <h7 className="text-sm font-medium mb-2">Common Pitfalls to Avoid</h7>
                                      <ul className="space-y-2 text-sm">
                                        <li className="flex items-start gap-2">
                                          <AlertTriangle className="w-4 h-4 text-orange-600 dark:text-orange-400 shrink-0 mt-0.5" />
                                          <div>
                                            <span className="font-medium">Over-restrictive policies</span>
                                            <p className="text-xs text-muted-foreground">Balance security with user productivity</p>
                                          </div>
                                        </li>
                                        <li className="flex items-start gap-2">
                                          <AlertTriangle className="w-4 h-4 text-orange-600 dark:text-orange-400 shrink-0 mt-0.5" />
                                          <div>
                                            <span className="font-medium">Skipping pilot phase</span>
                                            <p className="text-xs text-muted-foreground">Test governance controls with a small group first</p>
                                          </div>
                                        </li>
                                        <li className="flex items-start gap-2">
                                          <AlertTriangle className="w-4 h-4 text-orange-600 dark:text-orange-400 shrink-0 mt-0.5" />
                                          <div>
                                            <span className="font-medium">Ignoring change management</span>
                                            <p className="text-xs text-muted-foreground">Communicate changes and provide training</p>
                                          </div>
                                        </li>
                                      </ul>
                                    </div>
                                  </div>
                                </TabsContent>
                              </Tabs>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                </CardContent>
              </Card>
            )}

            {/* Maturity Recommendations */}
            {maturityLevel && maturityLevel.recommendations && maturityLevel.recommendations.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5 text-blue-600" />
                    Maturity Level Recommendations
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  {maturityLevel.recommendations.map((rec: string, index: number) => (
                    <div key={index} className="flex items-start gap-3 p-3 rounded-lg bg-blue-50 dark:bg-blue-900/20">
                      <Badge>{index + 1}</Badge>
                      <span className="text-sm">{rec}</span>
                    </div>
                  ))}
                </CardContent>
              </Card>
            )}

            {/* Fallback when no recommendations */}
            {(!securityScore || !securityScore.recommendations || securityScore.recommendations.length === 0) && 
             (!maturityLevel || !maturityLevel.recommendations || maturityLevel.recommendations.length === 0) && (
              <Card>
                <CardContent className="text-center py-8">
                  <Lightbulb className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Recommendations Available</h3>
                  <p className="text-gray-500">
                    Complete the assessment questions to receive personalized recommendations for improving your Power Platform implementation.
                  </p>
                </CardContent>
              </Card>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}